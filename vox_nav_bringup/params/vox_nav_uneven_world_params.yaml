vox_nav_planner_server_rclcpp_node:
  ros__parameters:
    planner_plugin: "OptimalElevationPlanner"                 # other options: "SE2Planner", "ElevationPlanner", "OptimalElevationPlanner"
    expected_planner_frequency: 1.0
    planner_name: "AnytimePathShortening"              # PRMstar,LazyPRMstar,RRTstar,RRTsharp,RRTXstatic,InformedRRTstar,BITstar, 
                                                       # ABITstar,AITstar,CForest,LBTRRT,SST,TRRT,SPARS,SPARStwo,FMT,AnytimePathShortening
    planner_timeout: 10.0
    interpolation_parameter: 25                         # set to 0 if you wanna disable interpolating and smooting, otherwise 25 is a good default value                    
    octomap_voxel_size: 0.4
    robot_body_dimens:
      x: 1.2
      y: 1.2
      z: 0.8
    #robot_mesh_path: "package://botanbot_description/meshes/base_simplified.stl" # leave empty if you do not have one, robot_mesh_path: ""
    robot_mesh_path: ""
    SE2Planner:
      plugin: "vox_nav_planning::SE2Planner"         # CForest: Reccomended
      se2_space: "REEDS"                             # "DUBINS","REEDS", "SE2" ### PS. Use DUBINS OR REEDS for Ackermann
      z_elevation: 1.5                               # Elevation of robot from ground plane, robot should not collide with plane                                      
      rho: 2.5                                       # Curve radius form reeds and dubins only
      state_space_boundries: 
        minx: -100.0
        maxx: 100.0
        miny: -100.0
        maxy: 100.0
        minyaw: -3.14
        maxyaw: 3.14
    ElevationPlanner: 
      plugin: "vox_nav_planning::ElevationPlanner"    # PRMstar: Reccomended
      se2_space: "SE2"                             # "DUBINS","REEDS", "SE2" ### PS. Use DUBINS OR REEDS for Ackermann
      rho: 2.0                                        # Curve radius for reeds and dubins only
      state_space_boundries:
        minx: -100.0
        maxx:  100.0
        miny: -100.0
        maxy:  100.0
        minz: -5.0
        maxz:  10.0
    OptimalElevationPlanner: 
      plugin: "vox_nav_planning::OptimalElevationPlanner"    # Bases on Astar on SuperVoxelClustering
      se2_space: "SE2"                                     # "DUBINS","REEDS", "SE2" ### PS. Use DUBINS OR REEDS for Ackermann
      rho: 2.0
      graph_search_method: "astar"                           # Other options: astar , dijkstra
      supervoxel_disable_transform: false                    # set true for organized point clouds
      supervoxel_resolution: 0.4
      supervoxel_seed_resolution: 1.5
      supervoxel_color_importance: 0.0
      supervoxel_spatial_importance: 1.0
      supervoxel_normal_importance: 1.0
      distance_penalty_weight: 10.0
      elevation_penalty_weight: 0.0
      state_space_boundries:
        minx: -50.0
        maxx: 50.0
        miny: -50.0
        maxy: 50.0
        minz: -2.0
        maxz: 12.0

vox_nav_controller_server_rclcpp_node:
   ros__parameters: 
      controller_plugin: "LyapunovControllerROS"                               # other options: non
      controller_frequency: 100.0                                              # acado is really fast(+1000.0Hz) casadi can deal up to just 20.0Hz maybe
      goal_tolerance_distance: 0.4                                            # in meters, once smaller than this one controller tries to minimize orientation error
      goal_tolerance_orientation: 0.1                                         # in radians, once smaller than this value,controller exits with success
      transform_timeout: 0.01                                                 # seconds, this is used to regulate lookUpTransfrom calls from tf2
      global_plan_look_ahead_distance: 4.5                                    # look this amount of meters from current robot pose to remaining global path
      ref_traj_se2_space: "REEDS"                                             # "DUBINS","REEDS", "SE2" ### PS. Use DUBINS OR REEDS for Ackermann
      rho: 3.0                                                                # Curve radius form reeds and dubins only
      robot_radius: 1.25                                                             
      MPCControllerCasadiROS:
         plugin: "mpc_controller_casadi::MPCControllerCasadiROS"
         N: 10                                                                 # timesteps in MPC Horizon
         DT: 0.2                                                              # discretization time between timesteps(s)
         L_F: 0.67                                                            # distance from CoG to front axle(m)
         L_R: 0.67                                                            # distance from CoG to rear axle(m)
         V_MIN: -0.4                                                          # min / max velocity constraint(m / s)
         V_MAX: 1.0
         A_MIN: -0.1                                                          # min / max acceleration constraint(m / s ^ 2)
         A_MAX: 1.0
         DF_MIN: -0.8                                                         # min / max front steer angle constraint(rad)
         DF_MAX: 0.8
         A_DOT_MIN: -0.5                                                      # min / max jerk constraint(m / s ^ 3)
         A_DOT_MAX: 0.5
         DF_DOT_MIN: -0.5                                                     # min / max front steer angle rate constraint(rad / s)
         DF_DOT_MAX: 0.5
         Q: [10.0, 10.0, 0.1, 0.1]                                            # weights on x, y, psi, v.
         R: [10.0, 100.0]                                                     # weights on jerk and slew rate(steering angle derivative)
         debug_mode: False                                                    # enable/disable debug messages
         params_configured: True
         obstacle_cost: 50.0
         max_obstacles: 4

      MPCControllerAcadoROS:
         plugin: "mpc_controller_acado::MPCControllerAcadoROS"
         N: 20                                                                # timesteps in MPC Horizon
         Ni: 1
         DT: 0.2                                                              # discretization time between timesteps(s)
         L_F: 0.67                                                            # distance from CoG to front axle(m)
         L_R: 0.67                                                            # distance from CoG to rear axle(m)
         V_MIN: -0.2                                                          # min / max velocity constraint(m / s)
         V_MAX: 0.4
         A_MIN: -0.1                                                          # min / max acceleration constraint(m / s ^ 2)
         A_MAX: 0.5
         DF_MIN: -0.6                                                         # min / max front steer angle constraint(rad)
         DF_MAX: 0.6
         Q: [1.0, 1.0, 0.0, 0.0, 0.15]                                        # weights on x, y, psi, and v, obstacle_cost.
         R: [10.0, 10.0]                                                      # weights on input acc and df, acceleration and steering angle
         debug_mode: False                                                    # enable/disable debug messages
         params_configured: True
         max_obstacles: 6
         full_ackerman: True

      LyapunovControllerROS:
         plugin: "lyapunov_controller::LyapunovControllerROS"
         V_MIN: -0.5                                                          # min / max velocity constraint(m / s)
         V_MAX: 0.5
         DF_MIN: -0.5                                                         # min / max front steer angle constraint(rad)
         DF_MAX: 0.5
         k1: -1.0
         k2: 5.0
         lookahead_n_waypoints: 2
